Class Cylinder : actor
{
  Default
  {
	Radius 20;
	Height 40;
	Health 100;
	+SOLID
	+SHOOTABLE
	+NOBLOOD
	+DONTGIB
	+NOICEDEATH
	+CANPASS	   // This allows vertical stacking
	+ISOMETRICSPRITES
	DeathSound "weapons/rocklx";
  }

  override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
  {
	  // called when taking damage
	  SetState(FindState('Pain'));
	  return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
  }
 
  States
  {
  Spawn:
    CYL1 A 1;
  Rest:
    CYL1 A 1;
    Loop;
  Pain:
	CYL1 A 1
        {
            A_SetRenderStyle(1.0, STYLE_SHADED);
            SetShade("FF0000");
        }
	CYL1 A 4;
	CYL1 A 1 A_SetRenderStyle(1.0, STYLE_NORMAL);
	Goto Rest;
  Death:
	TNT1 A 0
		{
			A_StartSound("weapons/rocklx", CHAN_BODY);
			bFORCEXYBILLBOARD = true;
		}
	MISL C 10 Bright;// A_Explode; // this hurts things close by
	MISL D 10 Bright;
	Stop;
  }
}

class Swi : TechLamp
{
	bool lamp_on; //Used to track whether the lamp is on

	Default
	{
		Radius 10;
		+ISOMETRICSPRITES
	}

	override bool Used (Actor user)
	{
		if (!lamp_on)
		{
			// Attach dynamic light, play a standard switch sound
			// and move to the LampOn state label:
			A_AttachLight('lamplight', DynamicLight.PulseLight, "DDDDFF", 96, 99, DYNAMICLIGHT.LF_ATTENUATE, (0,0,72), 0.4);
			A_StartSound("switches/normbutn");
			SetStateLabel("LampOn");
		}
		else
		{
			// Remove the light, play the sound, change states:
			A_RemoveLight('lamplight');
			A_StartSound("switches/normbutn");
			SetStateLabel("Spawn");
		}
		// flip the value of lamp_on:
		lamp_on = !lamp_on;
		return true;
	}

	States
	{
	Spawn:
		TLMP C -1;
		stop;
	LampOn:
		// This is how the regular TechLamp looks:
		TLMP ABCD 4 Bright;
		Loop;
	}
}

class MyPlasmaBall : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 15;
		Damage 5;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		+ISOMETRICSPRITES
		RenderStyle "Add";
		Alpha 0.5;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "%o was melted by %k's plasma gun.";
	}
	States
	{
	Spawn:
		PLSS AB 6 Bright;
		Loop;
	Death:
		PLSE ABCDE 4 Bright;
		Stop;
	}
}

class MyCell : Ammo
{
	Default
	{
		Inventory.PickupMessage "Picked up some cells.";
		Inventory.Amount 5;
		Inventory.MaxAmount 10;
		Inventory.PickupSound "misc/ammo_pkup";
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "CELLA0";
		Tag "Plasma cells";
	}
	States
	{
	Spawn:
		MDLS A -1; // See modeldef lump for model used as pickup graphic
		Stop;
	}
}

class MyPlasmaPistol : Weapon
{
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 5;
		Weapon.AmmoType "MyCell";
		+WEAPON.WIMPY_WEAPON
		Inventory.Pickupmessage "You found a plasma pistol!";
		Inventory.PickupSound "misc/ammo_pkup";
		Tag "Plasma Pistol";
	}

	action void A_FirePlasmaPistol()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true))
				return;
			
			State flash = weap.FindState('Flash');
			if (flash != null)
			{
				player.SetSafeFlash(weap, flash, random[FirePlasma](0, 1));
			}
			
		}
		
		SpawnPlayerMissile ("MyPlasmaBall");
	}

	States
	{
	Ready:
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
		TNT1 B 3 A_FirePlasmaPistol;
		TNT1 C 15;
		TNT1 B 5 A_ReFire;		
		Goto Ready;
	Flash:
		TNT1 A 7 Bright A_Light1;
		Goto LightDone;
		TNT1 A 7 Bright A_Light1;
		Goto LightDone;
 	Spawn:
		PLAS A -1; // This one has to be the sprite used as pickup graphic
		Stop;
	}
}

class MyFist : Weapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		Obituary "%o chewed on %k's fist.";
		Tag "Brass Knuckles";
		+WEAPON.WIMPY_WEAPON
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOSWITCHTO
	}

	action void A_MyPunch()
	{
		FTranslatedLineTarget t;

		if (player != null)
		{
			Weapon weap = player.ReadyWeapon;
			if (weap != null && !weap.bDehAmmo && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire))
					return;
			}
		}

		int damage = random[Punch](1, 10) << 1;
		/*
		if (FindInventory("PowerStrength"))
			damage *= 10;
		*/
		double ang = angle + Random2[Punch]() * (5.625 / 256);
		double range = MeleeRange + MELEEDELTA;
		double pitch = AimLineAttack (ang, range, null, 0., ALF_CHECK3D);

		LineAttack (ang, range, pitch, damage, 'Melee', "MyFistPuff", LAF_ISMELEEATTACK, t);

		// turn to face target
		if (t.linetarget)
		{
			// A_StartSound ("weapons/fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
		else
		{
			A_StartSound ("weapons/fistoof", CHAN_WEAPON);
		}
	}

	States
	{
	Ready:
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
		TNT1 C 4 A_MyPunch;
		TNT1 D 5;
		TNT1 C 4;
		TNT1 B 5 A_ReFire;
		Goto Ready;
	}
}


class MyFistPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		//RenderStyle "Translucent";
		Alpha 1.0;
		VSpeed 1;
		Mass 5;
	}
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF C 4 A_StartSound ("weapons/fist", CHAN_WEAPON);
		PUFF D 4;
		Stop;
	}
}
