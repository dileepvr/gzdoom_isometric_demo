class CameraMover : EventHandler
{
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
		{
			int key1, key2;
			[key1, key2] = Bindings.GetKeysForCommand("rotate_cam_left"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("ROTCAMLEFT", e.KeyScan);
			}
			[key1, key2] = Bindings.GetKeysForCommand("rotate_cam_right"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("ROTCAMRIGHT", e.KeyScan);
			}
			[key1, key2] = Bindings.GetKeysForCommand("center_cam"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("CENTERCAM", e.KeyScan);
			}
		}
		return false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		MyStandaloneGamePlayer pmo = MyStandaloneGamePlayer(players[e.Player].mo);
		if (e.Name == "ROTCAMLEFT")
		{
			pmo.rotate_camera(-2);
		}
		else if (e.Name == "ROTCAMRIGHT")
		{
			pmo.rotate_camera(2);
		}
		else if (e.Name == "CENTERCAM" && players[e.Player].camera && players[e.Player].camera.GetClassName() == 'SpectatorCamera')
		{
			if (players[e.Player].camera.tracer) players[e.Player].camera.SetOrigin(players[e.Player].camera.tracer.pos, true);
		}
	}
}

class ToggleAimAssist : EventHandler
{
	cvar isoaims[MAXPLAYERS];
	
	override void OnRegister()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			isoaims[i] = CVar.GetCVar("IsoAimAssist", players[i]);
		}
	}

	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
		{
			int key1, key2;
			[key1, key2] = Bindings.GetKeysForCommand("iso_aim_assist"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("TOGGLEAIMASSIST", e.KeyScan);
			}
		}
		return false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		MyStandaloneGamePlayer pmo = MyStandaloneGamePlayer(players[e.Player].mo);
		if (e.Name == "TOGGLEAIMASSIST")
		{
			isoaims[e.Player].SetBool(!isoaims[e.Player].GetBool());
			if (e.Player == consoleplayer)
			{
				if (isoaims[e.Player].GetBool()) console.printf("Aim Assist Enabled");
				else console.printf("Aim Assist Disabled");
			}
		}
	}
}

class selstruct // For use by SelectionCycler EventHandler below
{
	array<Actor> selectables;
	array<Line> switches;
	int selnum, selobjsize, selswsize;
	bool isosel, inobjarray, inswarray, cursec_usable;
	Vector3 selpos;
	double viewh;
	FLineTraceData t;
	Actor pmo;

	selstruct Init()
	{
		selectables.Clear(); selobjsize = 0;
		switches.Clear(); selswsize = 0;
		selnum = 0;
		isosel = false;
		inobjarray = true;
		inswarray = false;
		cursec_usable = false;
		selpos = (0., 0., 0.);
		return self;
	}
}

class SelectionCycler : EventHandler
{
	selstruct psels[MAXPLAYERS];
	Vector3 delta;
	double target_angle, target_pitch;
	FLineTraceData t;

	override void OnRegister()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			psels[i] = new("selstruct").Init();
		}
	}
	
	override void WorldLoaded (WorldEvent e)
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i] && players[i].mo)
			{
				psels[i].isosel = false;
			}
		}
	}
	//get angle and delta from two positions
	static vector3, double, double lookAt(Vector3 pos1, Vector3 pos2)
	{
		//calculate difference between pos1 and pos2 (level.Vec3Diff takes portals into account)
		Vector3 delta=level.Vec3Diff(pos1, pos2);
		
		//calculate angle and pitch to other actor
		double target_angle = atan2(delta.y, delta.x);
		double target_pitch = -asin(delta.z/delta.length());

		return delta, target_angle, target_pitch;
	}

	//get shorted xy-distance between actor and line
	static double shortest_dxy(Actor mo, Line ln)
	{
		double lnlength = (ln.v1.p - ln.v2.p).length();
		if (lnlength == 0.0) return (mo.pos.xy - ln.v1.p).length();
		else
		{
			return abs((ln.v2.p.y - ln.v1.p.y)* mo.pos.x - (ln.v2.p.x - ln.v1.p.x)* mo.pos.y
					   + ln.v2.p.x * ln.v1.p.y - ln.v2.p.y * ln.v1.p.x) / lnlength;
		}
	}

	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
		{
			int key1, key2;			
			[key1, key2] = Bindings.GetKeysForCommand("cycle_select"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("CYCLESEL", e.KeyScan);
			}
			[key1, key2] = Bindings.GetKeysForCommand("clear_select"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				SendNetworkEvent("CLEARSEL", e.KeyScan);
			}
			[key1, key2] = Bindings.GetKeysForCommand("use_selected"); // Define this command in keyconf or menudef lump
			if ((key1 && key1 == e.KeyScan) || (key2 && key2 == e.KeyScan))
			{
				if (psels[consoleplayer].isosel)
				{
					SendNetworkEvent("USESEL", e.KeyScan);
				}
			}
		}
		return false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "CYCLESEL")
		{
			let psel = psels[e.Player];
			if (!psels[e.Player].pmo) psels[e.Player].pmo = players[e.Player].mo;
			psel.viewh = players[e.Player].mo.viewheight*players[e.Player].crouchfactor; // players[e.Player].mo.height*0.5;
			if (psel.isosel)
			{
				// Handle next selection change, if possible
				if (psel.inswarray && (psel.switches.Size() > 0))
				{
					if (++psel.selnum >= psel.switches.Size())
					{
						psel.selnum = 0;
						if (!psel.cursec_usable && (psel.selectables.Size() > 0)) { psel.inobjarray = true; psel.inswarray = false; }
						else if (psel.cursec_usable) { psel.inswarray = false; }
					}
				} else if (psel.inobjarray && (psel.selectables.Size() > 0)) {
					if (++psel.selnum >= psel.selectables.Size())
					{
						psel.selnum = 0;
						if (!psel.cursec_usable && (psel.switches.Size() > 0)) { psel.inobjarray = false; psel.inswarray = true; }
						else if (psel.cursec_usable) { psel.inobjarray = false; }
					}
				} else if (psel.cursec_usable && !psel.inswarray && !psel.inobjarray) {
					psel.selnum = 0;
					if (psel.switches.Size() > 0) psel.inswarray = true;
					else if (psel.selectables.Size() > 0) psel.inobjarray = true;
				}

				// Update selected marker position
				if (psel.cursec_usable && !psel.inswarray && !psel.inobjarray)
				{
					psel.selpos = (psel.pmo.pos.X, psel.pmo.pos.Y, psel.pmo.floorz);
				} else if (psel.inswarray && (psel.switches.Size() > psel.selnum)) {
					Vector3 midln = ((psel.switches[psel.selnum].v1.p.x + psel.switches[psel.selnum].v2.p.x)*0.5,
									 (psel.switches[psel.selnum].v1.p.y + psel.switches[psel.selnum].v2.p.y)*0.5,
									 psel.pmo.pos.Z + psel.viewh);
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh), midln);
					bool tbool = psel.pmo.LineTrace(target_angle,
													(psel.pmo.pos.xy - midln.xy).length() + 8.0,
													0, TRF_THRUACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					if (!tbool || (t.hitType != TRACE_HitWall) || !t.hitLine || (t.hitLine.Index() != psel.switches[psel.selnum].Index()))
					{
						// Center of wall not in line of sight of the player
						bool setfalse = tbool;
						if (!tbool)
						{
							// Maybe the line isn't a wall! Check if it can for SPAC_UseBack condition
							int plside = Level.ActorOnLineSide(psel.pmo, psel.switches[psel.selnum]);
							if (plside == 1 && !(psel.switches[psel.selnum].activation & SPAC_UseBack)) { setfalse = true; }
							if (plside == 0 && ((psel.switches[psel.selnum].activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack)) == SPAC_UseBack))
							{ setfalse = true; }
						}
						if (setfalse)
						{
							// Something is obstucting it from the player
							psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
							psel.isosel = false;;
						}
					}
					if (psel.isosel) {
						psel.selpos = ((psel.switches[psel.selnum].v1.p.x + psel.switches[psel.selnum].v2.p.x)*0.5,
									   (psel.switches[psel.selnum].v1.p.y + psel.switches[psel.selnum].v2.p.y)*0.5,
									   psel.pmo.pos.Z + psel.viewh);
					}
				} else if (psel.inobjarray && (psel.selectables.Size() > psel.selnum)) {
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh),
																 psel.selectables[psel.selnum].pos
																 + (0, 0, psel.selectables[psel.selnum].height*0.5));
					bool tbool = psel.pmo.LineTrace(target_angle, players[e.Player].mo.UseRange, target_pitch,
													TRF_ALLACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					if (!tbool || (t.hitType != TRACE_HitActor) || !t.hitActor || (t.hitActor != psel.selectables[psel.selnum]))
					{
						psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
						psel.isosel = false;
					} else {
						psel.selpos = psel.selectables[psel.selnum].Pos + (0., 0., psel.selectables[psel.selnum].height*0.5);
						console.printf("%s selected\n", psel.selectables[psel.selnum].GetClassName());
					}
				}

				if (!(psel.inobjarray || psel.inswarray || psel.cursec_usable))//(selectables.Size() == 0) && (switches.Size() == 0))
				{				
					psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
					psel.isosel = false;
				}
			} else {
				psel.Init();
				psel.cursec_usable = (psel.pmo.CurSector.SecActTarget != null);
				BlockThingsIterator it = BlockThingsIterator.Create(psel.pmo, players[e.Player].mo.UseRange);
				Actor obj;
				while (it.Next())
				{
					obj = it.Thing;
					if (!obj || obj.player || obj.bISMONSTER || obj.bCORPSE || obj.bMASTERNOSEE || obj.bONLYVISIBLEINMIRRORS || obj.bDORMANT || obj.bINVISIBLE || obj.bMISSILE || obj.bNOINTERACTION || obj.bICECORPSE || obj.bCRASHED || obj.bINCONVERSATION || psel.pmo.Distance3D(obj) > players[e.Player].mo.UseRange)
						continue;
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh),
																 obj.pos + (0, 0, obj.height*0.5));
					bool tbool = psel.pmo.LineTrace(target_angle, players[e.Player].mo.UseRange, target_pitch,
													TRF_ALLACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					if (!tbool || (t.hitType != TRACE_HitActor) || !t.HitActor || (t.HitActor != obj))
						continue;
					psel.selectables.Push(obj);
					psel.selobjsize++;
					// console.printf("Added %s\n", obj.GetClassName());
				}
				BlockLinesIterator it2 = BlockLinesIterator.Create(psel.pmo, players[e.Player].mo.UseRange);
				Line ln;
				while (it2.Next())
				{
					ln = it2.CurLine;
					
					if (shortest_dxy(psel.pmo, ln) > players[e.Player].mo.UseRange)
						continue;

					if (((psel.pmo.pos.xy - ln.v1.p) dot (ln.v2.p - ln.v1.p) < 0)
						|| ((psel.pmo.pos.xy - ln.v2.p) dot (ln.v1.p - ln.v2.p) < 0))
					{
						if ((psel.pmo.pos.xy - ln.v1.p).length() > players[e.Player].mo.UseRange
							&& (psel.pmo.pos.xy - ln.v2.p).length() > players[e.Player].mo.UseRange) continue;
					}

					if (!(ln.activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack)) || (ln.special == 0))
					{
						int pside = Level.ActorOnLineSide(psel.pmo, ln);
						Sector sec = pside == 0 ? ln.frontsector : ln.backsector;
						if (((sec != null) && (sec.SecActTarget == null)))
							continue;
					}
					if (ln.special == 0) continue;
					psel.switches.Push(ln);
					psel.selswsize++;
				}
				for (int iter = 0; iter < psel.switches.Size(); iter++)
				{
					// Something in LineTrace() prevents this from being called inside the BlockLinesIterator while loop
					ln = psel.switches[iter];
					Vector3 midln = ((ln.v1.p.x + ln.v2.p.x)*0.5,
									 (ln.v1.p.y + ln.v2.p.y)*0.5,
									 psel.pmo.pos.Z + psel.viewh);
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh), midln);
					bool tempbool = psel.pmo.LineTrace(target_angle,
													   (psel.pmo.pos.xy - midln.xy).length() + 8.0,
													   0, TRF_THRUACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					if (!tempbool || (t.HitType != TRACE_HitWall) || !t.HitLine || (t.HitLine.Index() != ln.Index()))
					{
						// Center of wall not in line of sight of the player
						if (!tempbool)
						{
							// Maybe the line isn't a wall! Check if it can for SPAC_UseBack condition
							int plside = Level.ActorOnLineSide(psel.pmo, ln);
							if (plside == 1 && !(ln.activation & SPAC_UseBack)) { psel.switches.Delete(iter--); }
							if (plside == 0 && ((ln.activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack)) == SPAC_UseBack))
							{ psel.switches.Delete(iter--); }
						} else {
							// Something is obstucting it from the player
							psel.switches.Delete(iter--);
						}
					}
				}
				psel.selswsize = psel.switches.Size();
				psel.isosel = (psel.cursec_usable || (psel.selswsize > 0) || (psel.selobjsize > 0));
				if (psel.cursec_usable) {
					psel.selpos = (psel.pmo.pos.X, psel.pmo.pos.Y, psel.pmo.floorz);
				} else if (psel.selswsize > 0) {
					psel.inswarray = true;
					psel.selpos = ((psel.switches[0].v1.p.x + psel.switches[0].v2.p.x)*0.5,
								   (psel.switches[0].v1.p.y + psel.switches[0].v2.p.y)*0.5,
								   psel.pmo.pos.Z + psel.viewh);
					// console.printf("%d Lines selected\n", psel.selswsize);
				} else if (psel.selobjsize > 0) {
					psel.inobjarray = true;
					psel.selpos = psel.selectables[0].pos + (0., 0., psel.selectables[0].height*0.5);
					console.printf("%s selected\n", psel.selectables[0].GetClassName());
				} else {
					psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
				}
			}
		}
		else if (e.Name == "CLEARSEL")
		{
			psels[e.Player].isosel = false;
		}
		else if (e.Name == "USESEL")
		{
			let psel = psels[e.Player];
			if (psel.isosel)
			{
				if (psel.inswarray && (psel.switches.Size() > psel.selnum) && psel.switches[psel.selnum])
				{
					Vector3 midln = ((psel.switches[psel.selnum].v1.p.x + psel.switches[psel.selnum].v2.p.x)*0.5,
									 (psel.switches[psel.selnum].v1.p.y + psel.switches[psel.selnum].v2.p.y)*0.5,
									 psel.pmo.pos.Z + psel.viewh);
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh), midln);
					bool tbool = psel.pmo.LineTrace(target_angle,
													(psel.pmo.pos.xy - midln.xy).length() + 8.0,
													0, TRF_THRUACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					bool swvisible = true;
					if (!tbool || (t.hitType != TRACE_HitWall) || !t.hitLine || (t.hitLine.Index() != psel.switches[psel.selnum].Index()))
					{
						// Center of wall not in line of sight of the player
						swvisible = !tbool;
						if (!tbool)
						{
							// Maybe the line isn't a wall! Check if it can for SPAC_UseBack condition
							int plside = Level.ActorOnLineSide(psel.pmo, psel.switches[psel.selnum]);
							if (plside == 1 && !(psel.switches[psel.selnum].activation & SPAC_UseBack)) { swvisible = false; }
							if (plside == 0 && ((psel.switches[psel.selnum].activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack)) == SPAC_UseBack))
							{ swvisible = false; }
						}
					}
					if (swvisible)
					{
						if (psel.switches[psel.selnum].activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack))
						{
							int side = 0; // Level.ActorOnLineSide(pmo, switches[selnum]); // SPAC_UseBack gives me segfaults
							if (!psel.switches[psel.selnum].Activate(psel.pmo, side, SPAC_Use)) // (side == 0 ? SPAC_Use : SPAC_UseBack)))
								psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
						}
					} else {
						psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
					}
				} else if (psel.inobjarray && (psel.selectables.Size() > psel.selnum)
						   && psel.selectables[psel.selnum]) {
					[delta, target_angle, target_pitch] = lookAt(psel.pmo.pos + (0, 0, psel.viewh),
																 psel.selectables[psel.selnum].pos
																 + (0, 0, psel.selectables[psel.selnum].height*0.5));
					bool tbool = psel.pmo.LineTrace(target_angle, players[e.Player].mo.UseRange, target_pitch,
															   TRF_ALLACTORS | TRF_BLOCKUSE, psel.viewh, data:t);
					if (!tbool || (t.hitType != TRACE_HitActor) || !t.hitActor || (t.hitActor != psel.selectables[psel.selnum]))
					{
						psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
					} else {
						if (psel.selectables[psel.selnum].bSPECIAL)
						{
							psel.selectables[psel.selnum].Touch(psel.pmo);
						} else if (psel.selectables[psel.selnum].bUSESPECIAL && psel.selectables[psel.selnum].health > 0) {
							// This whole segment is only for old DECORATE type activate functions
							let thing = psel.selectables[psel.selnum];
							if (thing.activationtype & (THINGSPEC_Activate | THINGSPEC_Deactivate | THINGSPEC_Switch))
							{
								if ((thing.activationtype & THINGSPEC_Switch)
									&& !(thing.activationtype & (THINGSPEC_Activate | THINGSPEC_Deactivate)))
								{
									thing.activationtype |= THINGSPEC_Activate;
								}
								// Can it be activated?
								if (thing.activationtype & THINGSPEC_Activate)
								{
									thing.activationtype &= ~THINGSPEC_Activate; // Clear flag
									if (thing.activationtype & THINGSPEC_Switch) // Set other flag if switching
										thing.activationtype |= THINGSPEC_Deactivate;
									thing.Activate(psel.pmo);
								}
								// If not, can it be deactivated?
								else if (thing.activationtype & THINGSPEC_Deactivate)
								{
									thing.activationtype &= ~THINGSPEC_Deactivate; // Clear flag
									if (thing.activationtype & THINGSPEC_Switch)	// Set other flag if switching
										thing.activationtype |= THINGSPEC_Activate;
									thing.Deactivate(psel.pmo);
								}
							}
						} else if (!psel.selectables[psel.selnum].Used(psel.pmo)) {
							psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
						}
					}
				} else if (psel.cursec_usable && !psel.inswarray && !psel.inobjarray) {
					if (!psel.pmo.CurSector.SecActTarget || !psel.pmo.CurSector.TriggerSectorActions(psel.pmo, SectorAction.SECSPAC_Use))
						psel.pmo.A_StartSound("misc/noselect", CHAN_ITEM);
				}
				psel.isosel = false;
			}
		}
	}
	override void WorldThingDestroyed(WorldEvent e) 
	{
		if (e.Thing)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (PlayerInGame[i] && players[i].mo && (psels[i].selobjsize > 0))
				{
					int thindex = psels[i].selectables.Find(e.Thing);
					if (thindex != psels[i].selobjsize) // selectables.Size()
					{
						psels[i].selectables.Delete(thindex);
						psels[i].selobjsize--;
					}
				}
			}
		}
	}

	override void WorldTick()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i] && players[i].mo && psels[i].isosel)
			{
				if ((players[i].mo.Vel.X != 0) || (players[i].mo.Vel.Y != 0))
				{
					psels[i].isosel = false;
				}
			}
		}
	}
}
