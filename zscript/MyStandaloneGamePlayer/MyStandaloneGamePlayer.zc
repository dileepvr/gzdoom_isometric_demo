class MyStandaloneGamePlayer : PlayerPawn
{
	// Camera variables
	int diffangle, face_cam_mult;
	bool isocam_keypressed;
	double ppawn_isoyaw, ppawn_isodist, ppawn_isopitch;
	static const double camyaw[] = {180, 225, 270, 315, 0, 45, 90, 135}; // degrees
	int ppawn_isoviewpoint, ppawn_camflags;
	bool fancy_screen_rotate, isocam_changing;
	Actor ppawn_isocamera;
	int ctrltype;
	cvar isoctrltype;

	property ppawn_isoyaw : ppawn_isoyaw;
	property ppawn_isodist : ppawn_isodist;
	property ppawn_isopitch : ppawn_isopitch;
	property ppawn_isocamera : ppawn_isocamera;

	Default
	{
		Speed 1;
		Health 100;
		Radius 20;
		Height 80;
		Mass 100;
		PainChance 255;
		Player.DisplayName "BaldGuy";
		Player.CrouchSprite "PLYC";
		Player.ViewHeight 60;
		Player.ViewBob 0;
		Player.FlyBob 0;
		// Player.StartItem "MyPlasmaPistol";
		// Player.StartItem "MyCell", 5;
		Player.StartItem "MyFist";
		Player.WeaponSlot 1, "MyFist";
		Player.WeaponSlot 2, "MyPlasmaPistol";
		MyStandaloneGamePlayer.ppawn_isoyaw 225;
		MyStandaloneGamePlayer.ppawn_isodist 300;
		MyStandaloneGamePlayer.ppawn_isopitch 30;
		+ISOMETRICSPRITES
		-PICKUP // Don't auto-pickup things by walking over them
	}

	void SetupIsometricCamera()
	{
		
		if(player.camera == player.mo || (player.camera && player.camera.GetClassName() != 'SpectatorCamera')) // Setup isometric camera
	    {
			player.camera = SpectatorCamera(Actor.Spawn("SpectatorCamera", pos));
			player.camera.player = player; // Necessary for pain and pickup screen flashes. Adds viewbob too.
			ppawn_isocamera = player.camera; // Store pointer, in case you lose it
			player.camera.tracer = player.mo; // Do you want the camera to follow any actor? Set it as tracer here.
	    }
		SpectatorCamera(player.camera).Init(ppawn_isodist, ppawn_isoyaw, ppawn_isopitch, ppawn_camflags);
		// SpectatorCamera(player.camera).lagdistance = 150.0; // Use for a lazy camera that only follows if you get away from center
		// SpectatorCamera(player.camera).chasemode = 2; // 0: chase until tracer centered, 1: same but only when tracer is moving, 2: stop chase if tracer within lagdistance
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		face_cam_mult = 1; fancy_screen_rotate = true; isocam_changing = false; ppawn_isoviewpoint = 1;
		ppawn_camflags = VPSF_ABSOLUTEOFFSET | VPSF_ALLOWOUTOFBOUNDS | VPSF_ORTHOGRAPHIC;
		isocam_keypressed = false;	  
		SetupIsometricCamera();
		isoctrltype = CVar.GetCVar("IsoControlType", self.player);
		if (level.MapName == "MAP01")
		{
			player.camera.A_Print("Use 'Q' and 'E' to Rotate Camera View by 90 degrees.\n\n\nUse 'F' when stationary to select objects\n\nand 'G' to interact with them.", 10, "BIGUPPER");
		}
	}

	void rotate_camera(int viewchange)
	{
	    isocam_changing = true;
	    ppawn_isoviewpoint += viewchange;
	    if(ppawn_isoviewpoint < 0) ppawn_isoviewpoint = 7;
	}

	override void Tick()
	{	  
	   if (player.camera == player.mo)
	   {
		   // If some other level camera takes over player.camera for a scripted sequence and returns the pointer to player.mo
		   if (ppawn_isocamera) player.camera = ppawn_isocamera;
		   SetupIsometricCamera();
		   
	   }
	  // Handle Camera movement (Input is is being done by the CameraRotator EventHandler)
	  if(isocam_changing) {
	    if(fancy_screen_rotate) { // Fancy screen rotation
	      float angdiff = 0.125*(camyaw[ppawn_isoviewpoint % 8] - ppawn_isoyaw);
	      if (abs(angdiff) > 5.25) {
		if (angdiff > 22.5) angdiff -= 45.0;
		else if (angdiff < -22.5) angdiff += 45.0;
		if(abs(angdiff) > 5.25)
		  ppawn_isoyaw += (int)(angdiff);
		else ppawn_isoyaw = camyaw[ppawn_isoviewpoint % 8];
	      } else ppawn_isoyaw = camyaw[ppawn_isoviewpoint % 8];
	    }
		else ppawn_isoyaw = camyaw[ppawn_isoviewpoint % 8]; // No fancy screen rotation

	    SpectatorCamera(player.camera).Init(ppawn_isodist, ppawn_isoyaw, ppawn_isopitch, -1);
	    if(ppawn_isoyaw == camyaw[ppawn_isoviewpoint % 8]) isocam_changing = false;
	  }

	  diffangle = deltaangle(angle, ppawn_isoyaw);
	  if (abs(diffangle) > 90) face_cam_mult = -1;
	  else face_cam_mult = 1;
	  
	  Super.Tick();

	  // Make movement less slippery (borrowed from NashMovement.pk3)
	  if((Pos.Z == FloorZ) || bONMOBJ){
	    A_SetSpeed(3.0);
	    if((FindState('Pain') == NULL) || (CurState != FindState('Pain'))) {
	      Vel.X *= 0.5; Vel.Y *= 0.5;
	    }
	  }
	}

	override void MovePlayer ()
	{
	  UserCmd cmd = player.cmd;
	  let player = self.player;
	  // diffangle = deltaangle(angle, (player && player.camera) ? player.camera.angle : 0); // already happening in Tick()
	  // face_cam_mult = 1; // already happening in Tick()
	  // if (abs(diffangle) > 90) face_cam_mult = -1; // already happening in Tick()
	  // A_SetPitch(0); // Cancelling pitch modification happens in VerticalAimer EventHandler

	  cmd.yaw -= GetPlayerInput(INPUT_YAW); // Cancel default mouse-turn first
	  
	  if(diffangle >= 0) cmd.yaw += GetPlayerInput(INPUT_PITCH);
	  else if(diffangle < 0) cmd.yaw -= GetPlayerInput(INPUT_PITCH);

	  if(diffangle > 45 && diffangle < 135) cmd.yaw += 2*GetPlayerInput(INPUT_PITCH);
	  else if(diffangle > -135 && diffangle < -45) cmd.yaw -= 2*GetPlayerInput(INPUT_PITCH);

	  if(abs(diffangle) < 80 || abs(diffangle) > 100) cmd.yaw += 2*face_cam_mult*GetPlayerInput(INPUT_YAW);

	  ctrltype = isoctrltype.GetInt();
	  if (ctrltype == 0)
	  {
		  if(cmd.sidemove) cmd.sidemove *= face_cam_mult;
	  }
	  else // if (ctrltype == 1) // movement directions relative to camera
	  {
		  int smove = cmd.sidemove;
		  int fmove = cmd.forwardmove;
		  if(diffangle > 45+22.5 && diffangle < 135-22.5) // facing towards right of screen
		  {
			  cmd.sidemove = -fmove;
			  cmd.forwardmove = smove;
		  }
		  else if(diffangle > -135+22.5 && diffangle < -45-22.5) // facing towards left of screen
		  {
			  cmd.sidemove = fmove;
			  cmd.forwardmove = -smove;
		  }
		  else if(diffangle > 22.5 && diffangle < 45+22.5) // NW
		  {
			  cmd.sidemove = (int)(0.707*(smove-fmove));
			  cmd.forwardmove = (int)(0.707*(smove+fmove));
		  }
		  else if(diffangle < -22.5 && diffangle > -45-22.5) // NE
		  {
			  cmd.sidemove = (int)(0.707*(smove+fmove));
			  cmd.forwardmove = (int)(0.707*(-smove+fmove));
		  }
		  else if(diffangle > 135-22.5 && diffangle < 135+22.5) // SW
		  {
			  cmd.sidemove = (int)(0.707*(-smove-fmove));
			  cmd.forwardmove = (int)(0.707*(smove-fmove));
		  }
		  else if(diffangle < -135+22.5 && diffangle > -135-22.5) // SE
		  {
			  cmd.sidemove = (int)(0.707*(-smove+fmove));
			  cmd.forwardmove = (int)(0.707*(-smove-fmove));
		  }
		  else
		  {
			  cmd.sidemove *= face_cam_mult;
			  cmd.forwardmove *= face_cam_mult;
		  }
	  }
	  Super.MovePlayer();
	}
	
	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABC 4;
		PLAY D 1 A_StartSound("body/foot1", CHAN_BODY);
		PLAY D 3;
		Loop;
	Missile:
		PLAY A 12;
		Goto Spawn;
	Melee:
		PLAY A 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY A 4;
		PLAY A 4 A_Pain();
		Goto Spawn;
	Death:
		PLAY A 0 A_PlayerSkinCheck("AltSkinDeath");
	Death1:
		PLAY A 10;
		PLAY A 10 A_PlayerScream();
		PLAY A 10 A_NoBlocking();
		PLAY AAA 10;
		PLAY A -1;
		Stop;
	XDeath:
		PLAY A 0 A_PlayerSkinCheck("AltSkinXDeath");
	XDeath1:
		PLAY A 5;
		PLAY A 5 A_XScream();
		PLAY A 5 A_NoBlocking();
		PLAY AAAAA 5;
		PLAY A -1;
		Stop;
	AltSkinDeath:
		PLAY A 6;
		PLAY A 6 A_PlayerScream();
		PLAY AA 6;
		PLAY A 6 A_NoBlocking();
		PLAY AAA 6;
		PLAY A -1;
		Stop;
	AltSkinXDeath:
		PLAY A 5 A_PlayerScream();
		PLAY A 0 A_NoBlocking();
		PLAY A 5 A_SkullPop();
		PLAY AAAAAA 5;
		PLAY A -1;
		Stop;
	}
}
